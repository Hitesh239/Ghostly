# API Call Details for Edit and Update Operations

This document outlines the step-by-step process for performing edit and update API calls within the Ghostly application, focusing on the `shared` module's implementation.

## 1. API Endpoints and HTTP Method

Both "publish" and "edit" operations for posts utilize the `PUT` HTTP method.

-   **Base Endpoint:** `/api/admin/posts`

-   **Publish Post Endpoint:**
    `PUT ${loginDetails.domainUrl}/api/admin/posts?formats=html`
    (Used for publishing new posts or updating existing ones with a 'publish' intent)

-   **Edit Post Endpoint:**
    `PUT ${loginDetails.domainUrl}/api/admin/posts?formats=html&source=html`
    (Used specifically for editing existing posts)

## 2. Request Payloads

The request bodies for both `publishPost` and `editPost` are JSON objects wrapped in a `posts` array, even if only a single post is being updated. This design allows for potential batch updates in the future.

### 2.1. `UpdateRequestWrapper` (for `publishPost`)

This payload is used when publishing a new post or updating an existing one with a "publish" action.

```json
{
  "posts": [
    {
      "updated_at": "2025-07-17T10:30:00.000Z",
      "title": "My New Post Title",
      "html": "<p>This is the content of my new post.</p>",
      "status": "published",
      "feature_image": "https://example.com/image.jpg",
      "tags": [
        {
          "id": "tag_id_1",
          "name": "Technology"
        },
        {
          "id": "tag_id_2",
          "name": "Programming"
        }
      ],
      "authors": [
        {
          "id": "author_id_1"
        }
      ]
      // ... other relevant post fields
    }
  ]
}
```

**Key Fields:**

-   `updated_at` (String, required): A timestamp (ISO 8601 format) representing the last time the post was updated. This is crucial for optimistic locking and conflict resolution. The server uses this to ensure that the client is updating the latest version of the resource.
-   `title` (String): The title of the post.
-   `html` (String): The HTML content of the post.
-   `status` (String): The status of the post (e.g., "published", "draft").
-   `feature_image` (String, optional): URL of the featured image.
-   `tags` (Array of Objects, optional): List of tags associated with the post. Each tag object typically contains `id` and `name`.
-   `authors` (Array of Objects, optional): List of authors associated with the post. Each author object typically contains `id`.

### 2.2. `EditPostRequestWrapper` (for `editPost`)

This payload is specifically used for editing an existing post. It has a similar structure to `UpdateRequestWrapper` but might contain a slightly different set of fields relevant to an edit operation.

```json
{
  "posts": [
    {
      "updated_at": "2025-07-17T10:30:00.000Z",
      "title": "Updated Post Title",
      "html": "<p>This is the updated content of the post.</p>",
      "slug": "updated-post-title",
      "custom_excerpt": "A brief summary of the updated post.",
      "featured": true
      // ... other relevant post fields for editing
    }
  ]
}
```

**Key Fields:**

-   `updated_at` (String, required): Same as above, critical for conflict resolution.
-   `title` (String): The updated title.
-   `html` (String): The updated HTML content.
-   `slug` (String, optional): The URL slug for the post.
-   `custom_excerpt` (String, optional): A custom excerpt for the post.
-   `featured` (Boolean, optional): Whether the post is featured.
-   **Important:** The `updated_at` value sent in the request *must* match the `updated_at` value of the post currently stored on the server. If they don't match, it indicates a conflict (another client has updated the post), and the server will typically return a `409 Conflict` error.

## 3. Implementation Flow (High-Level)

The process of making an edit/update API call follows a layered architecture:

1.  **UI/ViewModel Layer:**
    -   Initiates the edit/update operation, typically in response to user interaction (e.g., clicking a "Save" button).
    -   Collects the necessary data from the UI (e.g., post title, content, status).
    -   Calls the appropriate UseCase (e.g., `EditPostUseCase`).

2.  **Use Case Layer (`EditPostUseCase`):**
    -   Acts as an intermediary between the UI/ViewModel and the Repository.
    -   **Conflict Resolution (`editPostWithLatestData`):** This is a crucial step for handling concurrent updates.
        -   Before attempting to send the `PUT` request, the `editPostWithLatestData` function first makes a `GET` request to fetch the *latest* version of the post from the server.
        -   It then extracts the `updated_at` timestamp from this freshly fetched server-side post data.
        -   The `updated_at` field in the `EditPostRequestWrapper` (or `UpdateRequestWrapper`) is then updated with this latest timestamp. This ensures that the `PUT` request sent to the server contains the most up-to-date `updated_at` value, minimizing the chance of a conflict.
        -   If a conflict still occurs (e.g., another client updates the post *between* the `GET` and `PUT` requests), the server will return an error (e.g., `EditConflictError`), which the UseCase can then propagate to the UI.
    -   Constructs the appropriate request payload (`EditPostRequestWrapper` or `UpdateRequestWrapper`) based on the data received from the UI.
    -   Calls the relevant method in the `PostRepository` (e.g., `postRepository.editPost`).

3.  **Repository Layer (`PostRepositoryImpl`):**
    -   Responsible for abstracting data sources (network, local database).
    -   Receives the request payload from the UseCase.
    -   Calls the corresponding method in the `ApiService` (e.g., `apiService.editPost` or `apiService.publishPost`) to make the actual network request.
    -   Handles the `Result` object returned by the `ApiService` (which encapsulates success or failure).
    -   On a successful API response, it may update the local database (e.g., `postDataSource.updatePost`) to reflect the changes.

4.  **API Service Layer (`ApiServiceImpl`):**
    -   Handles the direct interaction with the network.
    -   Uses a networking client (e.g., Ktor's `HttpClient`) to send the `PUT` request to the server.
    -   Serializes the `EditPostRequestWrapper` or `UpdateRequestWrapper` object into a JSON request body.
    -   Includes necessary headers (e.g., `Content-Type: application/json`, authentication tokens).
    -   Deserializes the server's JSON response into appropriate data models (e.g., `PostsResponse`).
    -   Wraps the result in a `Result` object (success or failure) to be returned to the Repository.

## 4. Conflict Resolution Strategy

The `updated_at` timestamp plays a critical role in preventing data loss due to concurrent modifications. The server is expected to perform optimistic locking:

-   When a client sends a `PUT` request to update a resource, it includes the `updated_at` timestamp of the version it last read.
-   The server compares this `updated_at` with its own `updated_at` for that resource.
-   If they match, the update proceeds.
-   If they *do not* match, it means another client has modified the resource since the current client last read it. The server then rejects the update, typically with a `409 Conflict` HTTP status code, indicating an `EditConflictError` in the application.

The `editPostWithLatestData` UseCase method is designed to mitigate these conflicts by ensuring the client always attempts to update with the most recent `updated_at` timestamp.

## 5. Replicating in Other Applications

To replicate this pattern in another application:

1.  **Define API Endpoints and HTTP Methods:** Clearly identify the `PUT` endpoints for your edit/update operations.
2.  **Design Request Payloads:**
    -   Create data classes/models for your request bodies, similar to `UpdateRequest` and `EditPostRequest`.
    -   **Crucially, include an `updated_at` (or similar timestamp/version) field in your payload for optimistic locking.**
    -   Ensure your payload structure matches what your backend API expects.
3.  **Implement API Service:**
    -   Use your chosen HTTP client library (e.g., Retrofit, Axios, Ktor, etc.).
    -   Create functions for your `PUT` requests, taking your defined request payload models as parameters.
    -   Handle JSON serialization and deserialization.
    -   Implement error handling for network issues and API-specific errors (e.g., 409 Conflict).
4.  **Implement Repository:**
    -   Create a repository layer that abstracts the API service.
    -   This layer will call your API service methods and can also handle caching or local data persistence if needed.
5.  **Implement Use Cases (Optional but Recommended):**
    -   Create use cases for specific business logic, such as `EditItemUseCase` or `UpdateProfileUseCase`.
    -   **Integrate conflict resolution:** If concurrent updates are a concern, implement a strategy similar to `editPostWithLatestData`. This involves:
        -   Fetching the latest version of the resource from the server before attempting an update.
        -   Updating the `updated_at` field in your request payload with the latest server-provided timestamp.
        -   Handling the `409 Conflict` error if it still occurs, prompting the user to resolve the conflict (e.g., by re-fetching and reapplying their changes).
6.  **Integrate with UI/ViewModel:**
    -   Call your use cases from your UI components or ViewModel.
    -   Handle the success and failure states, providing appropriate feedback to the user.

By following these steps, you can effectively implement robust edit and update API calls with proper conflict resolution in your applications.